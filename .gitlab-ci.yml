stages:
  - check
  - build
  - test
  - publish
  - deploy

Haskell Dockerfile linter:
  stage: check
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG == null
    - if: $CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == "develop"
    - if: $CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_TAG == null && $CI_COMMIT_BRANCH == null
  image: hadolint/hadolint:latest-debian
  script:
    - hadolint docker/avesechov1/Dockerfile

Shellcheck:
  stage: check
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG == null
    - if: $CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == "develop"
    - if: $CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_TAG == null && $CI_COMMIT_BRANCH == null
  image: koalaman/shellcheck-alpine:stable
  script:
    - shellcheck *.sh
    - shellcheck docker/*.sh

Image build:
  stage: build
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "trigger" && $CI_COMMIT_TAG == null
    - if: $CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == "develop"
    - if: $CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_TAG == null && $CI_COMMIT_BRANCH == null
  image: docker:20
  services:
    - docker:20-dind
  variables:
    CI_PRE_CLONE_SCRIPT: umask 022
  before_script:
    - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - source docker/export_cache_tags.sh
    - docker/build_and_push.sh avesechov1

Image publish:
  stage: publish
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == "develop"
    - if: $CI_PIPELINE_SOURCE == "trigger" && $CI_COMMIT_TAG == null
    - if: $CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_TAG == null && $CI_COMMIT_BRANCH == null
  image: docker:20
  services:
    - docker:20-dind
  before_script:
    - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker/publish.sh avesechov1
